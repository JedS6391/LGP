[{"name":"abstract class BranchOperation<TData>(func: (Arguments<TData>) -> TData) : BinaryOperation<TData> ","description":"nz.co.jedsimson.lgp.lib.operations.BranchOperation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-branch-operation/index.html","searchKeys":["BranchOperation","abstract class BranchOperation<TData>(func: (Arguments<TData>) -> TData) : BinaryOperation<TData> ","nz.co.jedsimson.lgp.lib.operations.BranchOperation"]},{"name":"class Addition : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Addition","location":"lib/nz.co.jedsimson.lgp.lib.operations/-addition/index.html","searchKeys":["Addition","class Addition : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Addition"]},{"name":"class And : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.And","location":"lib/nz.co.jedsimson.lgp.lib.operations/-and/index.html","searchKeys":["And","class And : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.And"]},{"name":"class BaseInstruction<T>(operation: Operation<T>, destination: RegisterIndex, operands: MutableList<RegisterIndex>) : Instruction<T> ","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/index.html","searchKeys":["BaseInstruction","class BaseInstruction<T>(operation: Operation<T>, destination: RegisterIndex, operands: MutableList<RegisterIndex>) : Instruction<T> ","nz.co.jedsimson.lgp.lib.base.BaseInstruction"]},{"name":"class BaseProblem(params: BaseProblemParameters) : Problem<Double, Outputs.Single<Double>, Targets.Single<Double>> ","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/index.html","searchKeys":["BaseProblem","class BaseProblem(params: BaseProblemParameters) : Problem<Double, Outputs.Single<Double>, Targets.Single<Double>> ","nz.co.jedsimson.lgp.lib.base.BaseProblem"]},{"name":"class BaseProblemException(message: String) : Exception","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemException","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-exception/index.html","searchKeys":["BaseProblemException","class BaseProblemException(message: String) : Exception","nz.co.jedsimson.lgp.lib.base.BaseProblemException"]},{"name":"class BaseProgram<TProgram, TOutput : Output<TProgram>>(instructions: MutableList<Instruction<TProgram>>, registers: RegisterSet<TProgram>, outputRegisterIndices: List<RegisterIndex>, sentinelTrueValue: TProgram, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput) : Program<TProgram, TOutput> ","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/index.html","searchKeys":["BaseProgram","class BaseProgram<TProgram, TOutput : Output<TProgram>>(instructions: MutableList<Instruction<TProgram>>, registers: RegisterSet<TProgram>, outputRegisterIndices: List<RegisterIndex>, sentinelTrueValue: TProgram, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput) : Program<TProgram, TOutput> ","nz.co.jedsimson.lgp.lib.base.BaseProgram"]},{"name":"class BaseProgramSimplifier<TProgram, TOutput : Output<TProgram>>","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramSimplifier","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-simplifier/index.html","searchKeys":["BaseProgramSimplifier","class BaseProgramSimplifier<TProgram, TOutput : Output<TProgram>>","nz.co.jedsimson.lgp.lib.base.BaseProgramSimplifier"]},{"name":"class BaseProgramTranslator<TProgram, TOutput : Output<TProgram>>(includeMainFunction: Boolean) : ProgramTranslator<TProgram, TOutput> ","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-translator/index.html","searchKeys":["BaseProgramTranslator","class BaseProgramTranslator<TProgram, TOutput : Output<TProgram>>(includeMainFunction: Boolean) : ProgramTranslator<TProgram, TOutput> ","nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator"]},{"name":"class Builder : ComponentLoaderBuilder<YamlConfigurationLoader> ","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/-builder/index.html","searchKeys":["Builder","class Builder : ComponentLoaderBuilder<YamlConfigurationLoader> ","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder"]},{"name":"class Division : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Division","location":"lib/nz.co.jedsimson.lgp.lib.operations/-division/index.html","searchKeys":["Division","class Division : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Division"]},{"name":"class EffectiveProgramGenerator<TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>>(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput) : ProgramGenerator<TProgram, TOutput, TTarget> ","description":"nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator","location":"lib/nz.co.jedsimson.lgp.lib.generators/-effective-program-generator/index.html","searchKeys":["EffectiveProgramGenerator","class EffectiveProgramGenerator<TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>>(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput) : ProgramGenerator<TProgram, TOutput, TTarget> ","nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator"]},{"name":"class ExclusiveOr : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.ExclusiveOr","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exclusive-or/index.html","searchKeys":["ExclusiveOr","class ExclusiveOr : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.ExclusiveOr"]},{"name":"class Exponent : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Exponent","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exponent/index.html","searchKeys":["Exponent","class Exponent : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Exponent"]},{"name":"class Identity : UnaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Identity","location":"lib/nz.co.jedsimson.lgp.lib.operations/-identity/index.html","searchKeys":["Identity","class Identity : UnaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Identity"]},{"name":"class IfGreater : BranchOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.IfGreater","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-greater/index.html","searchKeys":["IfGreater","class IfGreater : BranchOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.IfGreater"]},{"name":"class IfLessThanOrEqualTo : BranchOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-less-than-or-equal-to/index.html","searchKeys":["IfLessThanOrEqualTo","class IfLessThanOrEqualTo : BranchOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo"]},{"name":"class Multiplication : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Multiplication","location":"lib/nz.co.jedsimson.lgp.lib.operations/-multiplication/index.html","searchKeys":["Multiplication","class Multiplication : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Multiplication"]},{"name":"class Not : UnaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Not","location":"lib/nz.co.jedsimson.lgp.lib.operations/-not/index.html","searchKeys":["Not","class Not : UnaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Not"]},{"name":"class Or : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Or","location":"lib/nz.co.jedsimson.lgp.lib.operations/-or/index.html","searchKeys":["Or","class Or : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Or"]},{"name":"class RandomInstructionGenerator<TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>>(environment: EnvironmentFacade<TProgram, TOutput, TTarget>) : InstructionGenerator<TProgram, TOutput, TTarget> ","description":"nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-instruction-generator/index.html","searchKeys":["RandomInstructionGenerator","class RandomInstructionGenerator<TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>>(environment: EnvironmentFacade<TProgram, TOutput, TTarget>) : InstructionGenerator<TProgram, TOutput, TTarget> ","nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator"]},{"name":"class RandomProgramGenerator<TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>>(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput) : ProgramGenerator<TProgram, TOutput, TTarget> ","description":"nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-program-generator/index.html","searchKeys":["RandomProgramGenerator","class RandomProgramGenerator<TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>>(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput) : ProgramGenerator<TProgram, TOutput, TTarget> ","nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator"]},{"name":"class Sine : UnaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Sine","location":"lib/nz.co.jedsimson.lgp.lib.operations/-sine/index.html","searchKeys":["Sine","class Sine : UnaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Sine"]},{"name":"class Subtraction : BinaryOperation<Double> ","description":"nz.co.jedsimson.lgp.lib.operations.Subtraction","location":"lib/nz.co.jedsimson.lgp.lib.operations/-subtraction/index.html","searchKeys":["Subtraction","class Subtraction : BinaryOperation<Double> ","nz.co.jedsimson.lgp.lib.operations.Subtraction"]},{"name":"class YamlConfigurationLoader(filename: String) : ConfigurationLoader","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/index.html","searchKeys":["YamlConfigurationLoader","class YamlConfigurationLoader(filename: String) : ConfigurationLoader","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader"]},{"name":"data class BaseProblemParameters(name: String, description: Description, configFilename: String?, config: Configuration?, constants: List<Double>, operationClassNames: List<String>, defaultRegisterValue: Double, fitnessFunction: SingleOutputFitnessFunction<Double>, tournamentSize: Int, numberOfOffspring: Int, maximumSegmentLength: Int, maximumCrossoverDistance: Int, maximumSegmentLengthDifference: Int, macroMutationInsertionRate: Double, macroMutationDeletionRate: Double, microRegisterMutationRate: Double, microOperationMutationRate: Double, randomStateSeed: Long?, runs: Int)","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/index.html","searchKeys":["BaseProblemParameters","data class BaseProblemParameters(name: String, description: Description, configFilename: String?, config: Configuration?, constants: List<Double>, operationClassNames: List<String>, defaultRegisterValue: Double, fitnessFunction: SingleOutputFitnessFunction<Double>, tournamentSize: Int, numberOfOffspring: Int, maximumSegmentLength: Int, maximumCrossoverDistance: Int, maximumSegmentLengthDifference: Int, macroMutationInsertionRate: Double, macroMutationDeletionRate: Double, microRegisterMutationRate: Double, microOperationMutationRate: Double, randomStateSeed: Long?, runs: Int)","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters"]},{"name":"data class BaseProblemTestResult(testResult: TestResult<Double, Outputs.Single<Double>>, testFitness: Double)","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-test-result/index.html","searchKeys":["BaseProblemTestResult","data class BaseProblemTestResult(testResult: TestResult<Double, Outputs.Single<Double>>, testFitness: Double)","nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult"]},{"name":"fun <T> BaseInstruction(operation: Operation<T>, destination: RegisterIndex, operands: MutableList<RegisterIndex>)","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.BaseInstruction","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/-base-instruction.html","searchKeys":["BaseInstruction","fun <T> BaseInstruction(operation: Operation<T>, destination: RegisterIndex, operands: MutableList<RegisterIndex>)","nz.co.jedsimson.lgp.lib.base.BaseInstruction.BaseInstruction"]},{"name":"fun <TData> BranchOperation(func: (Arguments<TData>) -> TData)","description":"nz.co.jedsimson.lgp.lib.operations.BranchOperation.BranchOperation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-branch-operation/-branch-operation.html","searchKeys":["BranchOperation","fun <TData> BranchOperation(func: (Arguments<TData>) -> TData)","nz.co.jedsimson.lgp.lib.operations.BranchOperation.BranchOperation"]},{"name":"fun <TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>> EffectiveProgramGenerator(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput)","description":"nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator.EffectiveProgramGenerator","location":"lib/nz.co.jedsimson.lgp.lib.generators/-effective-program-generator/-effective-program-generator.html","searchKeys":["EffectiveProgramGenerator","fun <TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>> EffectiveProgramGenerator(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput)","nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator.EffectiveProgramGenerator"]},{"name":"fun <TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>> RandomInstructionGenerator(environment: EnvironmentFacade<TProgram, TOutput, TTarget>)","description":"nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator.RandomInstructionGenerator","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-instruction-generator/-random-instruction-generator.html","searchKeys":["RandomInstructionGenerator","fun <TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>> RandomInstructionGenerator(environment: EnvironmentFacade<TProgram, TOutput, TTarget>)","nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator.RandomInstructionGenerator"]},{"name":"fun <TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>> RandomProgramGenerator(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput)","description":"nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.RandomProgramGenerator","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-program-generator/-random-program-generator.html","searchKeys":["RandomProgramGenerator","fun <TProgram, TOutput : Output<TProgram>, TTarget : Target<TProgram>> RandomProgramGenerator(environment: EnvironmentFacade<TProgram, TOutput, TTarget>, sentinelTrueValue: TProgram, outputRegisterIndices: List<RegisterIndex>, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput)","nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.RandomProgramGenerator"]},{"name":"fun <TProgram, TOutput : Output<TProgram>> BaseProgram(instructions: MutableList<Instruction<TProgram>>, registers: RegisterSet<TProgram>, outputRegisterIndices: List<RegisterIndex>, sentinelTrueValue: TProgram, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput)","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.BaseProgram","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/-base-program.html","searchKeys":["BaseProgram","fun <TProgram, TOutput : Output<TProgram>> BaseProgram(instructions: MutableList<Instruction<TProgram>>, registers: RegisterSet<TProgram>, outputRegisterIndices: List<RegisterIndex>, sentinelTrueValue: TProgram, outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput)","nz.co.jedsimson.lgp.lib.base.BaseProgram.BaseProgram"]},{"name":"fun <TProgram> multipleOutput(): (BaseProgram<TProgram, Outputs.Multiple<TProgram>>) -> Outputs.Multiple<TProgram>","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramOutputResolvers.multipleOutput","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-output-resolvers/multiple-output.html","searchKeys":["multipleOutput","fun <TProgram> multipleOutput(): (BaseProgram<TProgram, Outputs.Multiple<TProgram>>) -> Outputs.Multiple<TProgram>","nz.co.jedsimson.lgp.lib.base.BaseProgramOutputResolvers.multipleOutput"]},{"name":"fun <TProgram> singleOutput(): (BaseProgram<TProgram, Outputs.Single<TProgram>>) -> Outputs.Single<TProgram>","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramOutputResolvers.singleOutput","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-output-resolvers/single-output.html","searchKeys":["singleOutput","fun <TProgram> singleOutput(): (BaseProgram<TProgram, Outputs.Single<TProgram>>) -> Outputs.Single<TProgram>","nz.co.jedsimson.lgp.lib.base.BaseProgramOutputResolvers.singleOutput"]},{"name":"fun Addition()","description":"nz.co.jedsimson.lgp.lib.operations.Addition.Addition","location":"lib/nz.co.jedsimson.lgp.lib.operations/-addition/-addition.html","searchKeys":["Addition","fun Addition()","nz.co.jedsimson.lgp.lib.operations.Addition.Addition"]},{"name":"fun And()","description":"nz.co.jedsimson.lgp.lib.operations.And.And","location":"lib/nz.co.jedsimson.lgp.lib.operations/-and/-and.html","searchKeys":["And","fun And()","nz.co.jedsimson.lgp.lib.operations.And.And"]},{"name":"fun BaseProblem(params: BaseProblemParameters)","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.BaseProblem","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/-base-problem.html","searchKeys":["BaseProblem","fun BaseProblem(params: BaseProblemParameters)","nz.co.jedsimson.lgp.lib.base.BaseProblem.BaseProblem"]},{"name":"fun BaseProblemException(message: String)","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemException.BaseProblemException","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-exception/-base-problem-exception.html","searchKeys":["BaseProblemException","fun BaseProblemException(message: String)","nz.co.jedsimson.lgp.lib.base.BaseProblemException.BaseProblemException"]},{"name":"fun BaseProblemParameters(name: String, description: Description, configFilename: String? = null, config: Configuration? = null, constants: List<Double> = listOf(-1.0, 0.0, 1.0), operationClassNames: List<String> = listOf(\n        \"nz.co.jedsimson.lgp.lib.operations.Addition\",\n        \"nz.co.jedsimson.lgp.lib.operations.Subtraction\",\n        \"nz.co.jedsimson.lgp.lib.operations.Multiplication\",\n        \"nz.co.jedsimson.lgp.lib.operations.Division\"\n    ), defaultRegisterValue: Double = 1.0, fitnessFunction: SingleOutputFitnessFunction<Double> = FitnessFunctions.MSE, tournamentSize: Int = 20, numberOfOffspring: Int = 10, maximumSegmentLength: Int = 6, maximumCrossoverDistance: Int = 5, maximumSegmentLengthDifference: Int = 3, macroMutationInsertionRate: Double = 0.67, macroMutationDeletionRate: Double = 0.33, microRegisterMutationRate: Double = 0.4, microOperationMutationRate: Double = 0.4, randomStateSeed: Long? = null, runs: Int = 10)","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.BaseProblemParameters","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/-base-problem-parameters.html","searchKeys":["BaseProblemParameters","fun BaseProblemParameters(name: String, description: Description, configFilename: String? = null, config: Configuration? = null, constants: List<Double> = listOf(-1.0, 0.0, 1.0), operationClassNames: List<String> = listOf(\n        \"nz.co.jedsimson.lgp.lib.operations.Addition\",\n        \"nz.co.jedsimson.lgp.lib.operations.Subtraction\",\n        \"nz.co.jedsimson.lgp.lib.operations.Multiplication\",\n        \"nz.co.jedsimson.lgp.lib.operations.Division\"\n    ), defaultRegisterValue: Double = 1.0, fitnessFunction: SingleOutputFitnessFunction<Double> = FitnessFunctions.MSE, tournamentSize: Int = 20, numberOfOffspring: Int = 10, maximumSegmentLength: Int = 6, maximumCrossoverDistance: Int = 5, maximumSegmentLengthDifference: Int = 3, macroMutationInsertionRate: Double = 0.67, macroMutationDeletionRate: Double = 0.33, microRegisterMutationRate: Double = 0.4, microOperationMutationRate: Double = 0.4, randomStateSeed: Long? = null, runs: Int = 10)","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.BaseProblemParameters"]},{"name":"fun BaseProblemTestResult(testResult: TestResult<Double, Outputs.Single<Double>>, testFitness: Double)","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult.BaseProblemTestResult","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-test-result/-base-problem-test-result.html","searchKeys":["BaseProblemTestResult","fun BaseProblemTestResult(testResult: TestResult<Double, Outputs.Single<Double>>, testFitness: Double)","nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult.BaseProblemTestResult"]},{"name":"fun BaseProgramSimplifier()","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramSimplifier.BaseProgramSimplifier","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-simplifier/-base-program-simplifier.html","searchKeys":["BaseProgramSimplifier","fun BaseProgramSimplifier()","nz.co.jedsimson.lgp.lib.base.BaseProgramSimplifier.BaseProgramSimplifier"]},{"name":"fun BaseProgramTranslator(includeMainFunction: Boolean)","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator.BaseProgramTranslator","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-translator/-base-program-translator.html","searchKeys":["BaseProgramTranslator","fun BaseProgramTranslator(includeMainFunction: Boolean)","nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator.BaseProgramTranslator"]},{"name":"fun Boolean.toDouble(): Double","description":"nz.co.jedsimson.lgp.lib.operations.toDouble","location":"lib/nz.co.jedsimson.lgp.lib.operations/to-double.html","searchKeys":["toDouble","fun Boolean.toDouble(): Double","nz.co.jedsimson.lgp.lib.operations.toDouble"]},{"name":"fun Builder()","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.Builder","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/-builder/-builder.html","searchKeys":["Builder","fun Builder()","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.Builder"]},{"name":"fun Division()","description":"nz.co.jedsimson.lgp.lib.operations.Division.Division","location":"lib/nz.co.jedsimson.lgp.lib.operations/-division/-division.html","searchKeys":["Division","fun Division()","nz.co.jedsimson.lgp.lib.operations.Division.Division"]},{"name":"fun Double.toBoolean(): Boolean","description":"nz.co.jedsimson.lgp.lib.operations.toBoolean","location":"lib/nz.co.jedsimson.lgp.lib.operations/to-boolean.html","searchKeys":["toBoolean","fun Double.toBoolean(): Boolean","nz.co.jedsimson.lgp.lib.operations.toBoolean"]},{"name":"fun ExclusiveOr()","description":"nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.ExclusiveOr","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exclusive-or/-exclusive-or.html","searchKeys":["ExclusiveOr","fun ExclusiveOr()","nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.ExclusiveOr"]},{"name":"fun Exponent()","description":"nz.co.jedsimson.lgp.lib.operations.Exponent.Exponent","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exponent/-exponent.html","searchKeys":["Exponent","fun Exponent()","nz.co.jedsimson.lgp.lib.operations.Exponent.Exponent"]},{"name":"fun Identity()","description":"nz.co.jedsimson.lgp.lib.operations.Identity.Identity","location":"lib/nz.co.jedsimson.lgp.lib.operations/-identity/-identity.html","searchKeys":["Identity","fun Identity()","nz.co.jedsimson.lgp.lib.operations.Identity.Identity"]},{"name":"fun IfGreater()","description":"nz.co.jedsimson.lgp.lib.operations.IfGreater.IfGreater","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-greater/-if-greater.html","searchKeys":["IfGreater","fun IfGreater()","nz.co.jedsimson.lgp.lib.operations.IfGreater.IfGreater"]},{"name":"fun IfLessThanOrEqualTo()","description":"nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.IfLessThanOrEqualTo","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-less-than-or-equal-to/-if-less-than-or-equal-to.html","searchKeys":["IfLessThanOrEqualTo","fun IfLessThanOrEqualTo()","nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.IfLessThanOrEqualTo"]},{"name":"fun Multiplication()","description":"nz.co.jedsimson.lgp.lib.operations.Multiplication.Multiplication","location":"lib/nz.co.jedsimson.lgp.lib.operations/-multiplication/-multiplication.html","searchKeys":["Multiplication","fun Multiplication()","nz.co.jedsimson.lgp.lib.operations.Multiplication.Multiplication"]},{"name":"fun Not()","description":"nz.co.jedsimson.lgp.lib.operations.Not.Not","location":"lib/nz.co.jedsimson.lgp.lib.operations/-not/-not.html","searchKeys":["Not","fun Not()","nz.co.jedsimson.lgp.lib.operations.Not.Not"]},{"name":"fun Or()","description":"nz.co.jedsimson.lgp.lib.operations.Or.Or","location":"lib/nz.co.jedsimson.lgp.lib.operations/-or/-or.html","searchKeys":["Or","fun Or()","nz.co.jedsimson.lgp.lib.operations.Or.Or"]},{"name":"fun Sine()","description":"nz.co.jedsimson.lgp.lib.operations.Sine.Sine","location":"lib/nz.co.jedsimson.lgp.lib.operations/-sine/-sine.html","searchKeys":["Sine","fun Sine()","nz.co.jedsimson.lgp.lib.operations.Sine.Sine"]},{"name":"fun Subtraction()","description":"nz.co.jedsimson.lgp.lib.operations.Subtraction.Subtraction","location":"lib/nz.co.jedsimson.lgp.lib.operations/-subtraction/-subtraction.html","searchKeys":["Subtraction","fun Subtraction()","nz.co.jedsimson.lgp.lib.operations.Subtraction.Subtraction"]},{"name":"fun YamlConfigurationLoader(filename: String)","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.YamlConfigurationLoader","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/-yaml-configuration-loader.html","searchKeys":["YamlConfigurationLoader","fun YamlConfigurationLoader(filename: String)","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.YamlConfigurationLoader"]},{"name":"fun add(args: Arguments<Double>): Double","description":"nz.co.jedsimson.lgp.lib.operations.Addition.Companion.add","location":"lib/nz.co.jedsimson.lgp.lib.operations/-addition/-companion/add.html","searchKeys":["add","fun add(args: Arguments<Double>): Double","nz.co.jedsimson.lgp.lib.operations.Addition.Companion.add"]},{"name":"fun and(args: Arguments<Double>): Double","description":"nz.co.jedsimson.lgp.lib.operations.And.Companion.and","location":"lib/nz.co.jedsimson.lgp.lib.operations/-and/-companion/and.html","searchKeys":["and","fun and(args: Arguments<Double>): Double","nz.co.jedsimson.lgp.lib.operations.And.Companion.and"]},{"name":"fun filename(name: String): YamlConfigurationLoader.Builder","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.filename","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/-builder/filename.html","searchKeys":["filename","fun filename(name: String): YamlConfigurationLoader.Builder","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.filename"]},{"name":"fun not(args: Arguments<Double>): Double","description":"nz.co.jedsimson.lgp.lib.operations.Not.Companion.not","location":"lib/nz.co.jedsimson.lgp.lib.operations/-not/-companion/not.html","searchKeys":["not","fun not(args: Arguments<Double>): Double","nz.co.jedsimson.lgp.lib.operations.Not.Companion.not"]},{"name":"fun or(args: Arguments<Double>): Double","description":"nz.co.jedsimson.lgp.lib.operations.Or.Companion.or","location":"lib/nz.co.jedsimson.lgp.lib.operations/-or/-companion/or.html","searchKeys":["or","fun or(args: Arguments<Double>): Double","nz.co.jedsimson.lgp.lib.operations.Or.Companion.or"]},{"name":"fun simplify(program: BaseProgram<TProgram, TOutput>): String","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramSimplifier.simplify","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-simplifier/simplify.html","searchKeys":["simplify","fun simplify(program: BaseProgram<TProgram, TOutput>): String","nz.co.jedsimson.lgp.lib.base.BaseProgramSimplifier.simplify"]},{"name":"fun test(dataset: Dataset<Double, Targets.Single<Double>>): BaseProblemTestResult","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.test","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/test.html","searchKeys":["test","fun test(dataset: Dataset<Double, Targets.Single<Double>>): BaseProblemTestResult","nz.co.jedsimson.lgp.lib.base.BaseProblem.test"]},{"name":"fun train(dataset: Dataset<Double, Targets.Single<Double>>): TrainingResult<Double, Outputs.Single<Double>, Targets.Single<Double>>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.train","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/train.html","searchKeys":["train","fun train(dataset: Dataset<Double, Targets.Single<Double>>): TrainingResult<Double, Outputs.Single<Double>, Targets.Single<Double>>","nz.co.jedsimson.lgp.lib.base.BaseProblem.train"]},{"name":"fun xor(args: Arguments<Double>): Double","description":"nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.Companion.xor","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exclusive-or/-companion/xor.html","searchKeys":["xor","fun xor(args: Arguments<Double>): Double","nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.Companion.xor"]},{"name":"lateinit var filename: String","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.filename","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/-builder/filename.html","searchKeys":["filename","lateinit var filename: String","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.filename"]},{"name":"object BaseProgramOutputResolvers","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramOutputResolvers","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-output-resolvers/index.html","searchKeys":["BaseProgramOutputResolvers","object BaseProgramOutputResolvers","nz.co.jedsimson.lgp.lib.base.BaseProgramOutputResolvers"]},{"name":"object Companion","description":"nz.co.jedsimson.lgp.lib.operations.Addition.Companion","location":"lib/nz.co.jedsimson.lgp.lib.operations/-addition/-companion/index.html","searchKeys":["Companion","object Companion","nz.co.jedsimson.lgp.lib.operations.Addition.Companion"]},{"name":"object Companion","description":"nz.co.jedsimson.lgp.lib.operations.And.Companion","location":"lib/nz.co.jedsimson.lgp.lib.operations/-and/-companion/index.html","searchKeys":["Companion","object Companion","nz.co.jedsimson.lgp.lib.operations.And.Companion"]},{"name":"object Companion","description":"nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.Companion","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exclusive-or/-companion/index.html","searchKeys":["Companion","object Companion","nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.Companion"]},{"name":"object Companion","description":"nz.co.jedsimson.lgp.lib.operations.Not.Companion","location":"lib/nz.co.jedsimson.lgp.lib.operations/-not/-companion/index.html","searchKeys":["Companion","object Companion","nz.co.jedsimson.lgp.lib.operations.Not.Companion"]},{"name":"object Companion","description":"nz.co.jedsimson.lgp.lib.operations.Or.Companion","location":"lib/nz.co.jedsimson.lgp.lib.operations/-or/-companion/index.html","searchKeys":["Companion","object Companion","nz.co.jedsimson.lgp.lib.operations.Or.Companion"]},{"name":"open override fun build(): YamlConfigurationLoader","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.build","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/-builder/build.html","searchKeys":["build","open override fun build(): YamlConfigurationLoader","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.Builder.build"]},{"name":"open override fun copy(): BaseProgram<TProgram, TOutput>","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.copy","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/copy.html","searchKeys":["copy","open override fun copy(): BaseProgram<TProgram, TOutput>","nz.co.jedsimson.lgp.lib.base.BaseProgram.copy"]},{"name":"open override fun copy(): Instruction<T>","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.copy","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/copy.html","searchKeys":["copy","open override fun copy(): Instruction<T>","nz.co.jedsimson.lgp.lib.base.BaseInstruction.copy"]},{"name":"open override fun execute()","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.execute","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/execute.html","searchKeys":["execute","open override fun execute()","nz.co.jedsimson.lgp.lib.base.BaseProgram.execute"]},{"name":"open override fun execute(registers: RegisterSet<T>)","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.execute","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/execute.html","searchKeys":["execute","open override fun execute(registers: RegisterSet<T>)","nz.co.jedsimson.lgp.lib.base.BaseInstruction.execute"]},{"name":"open override fun findEffectiveProgram()","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.findEffectiveProgram","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/find-effective-program.html","searchKeys":["findEffectiveProgram","open override fun findEffectiveProgram()","nz.co.jedsimson.lgp.lib.base.BaseProgram.findEffectiveProgram"]},{"name":"open override fun generateInstruction(): Instruction<TProgram>","description":"nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator.generateInstruction","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-instruction-generator/generate-instruction.html","searchKeys":["generateInstruction","open override fun generateInstruction(): Instruction<TProgram>","nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator.generateInstruction"]},{"name":"open override fun generateProgram(): Program<TProgram, TOutput>","description":"nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator.generateProgram","location":"lib/nz.co.jedsimson.lgp.lib.generators/-effective-program-generator/generate-program.html","searchKeys":["generateProgram","open override fun generateProgram(): Program<TProgram, TOutput>","nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator.generateProgram"]},{"name":"open override fun generateProgram(): Program<TProgram, TOutput>","description":"nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.generateProgram","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-program-generator/generate-program.html","searchKeys":["generateProgram","open override fun generateProgram(): Program<TProgram, TOutput>","nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.generateProgram"]},{"name":"open override fun initialiseEnvironment()","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.initialiseEnvironment","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/initialise-environment.html","searchKeys":["initialiseEnvironment","open override fun initialiseEnvironment()","nz.co.jedsimson.lgp.lib.base.BaseProblem.initialiseEnvironment"]},{"name":"open override fun initialiseModel()","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.initialiseModel","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/initialise-model.html","searchKeys":["initialiseModel","open override fun initialiseModel()","nz.co.jedsimson.lgp.lib.base.BaseProblem.initialiseModel"]},{"name":"open override fun load(): Configuration","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.load","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/load.html","searchKeys":["load","open override fun load(): Configuration","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.load"]},{"name":"open override fun output(): TOutput","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.output","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/output.html","searchKeys":["output","open override fun output(): TOutput","nz.co.jedsimson.lgp.lib.base.BaseProgram.output"]},{"name":"open override fun solve(): Solution<Double>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.solve","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/solve.html","searchKeys":["solve","open override fun solve(): Solution<Double>","nz.co.jedsimson.lgp.lib.base.BaseProblem.solve"]},{"name":"open override fun toString(): String","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.toString","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.co.jedsimson.lgp.lib.base.BaseInstruction.toString"]},{"name":"open override fun toString(): String","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.toString","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/to-string.html","searchKeys":["toString","open override fun toString(): String","nz.co.jedsimson.lgp.lib.base.BaseProgram.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Addition.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-addition/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Addition.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.And.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-and/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.And.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Division.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-division/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Division.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exclusive-or/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Exponent.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exponent/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Exponent.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Identity.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-identity/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Identity.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.IfGreater.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-greater/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.IfGreater.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-less-than-or-equal-to/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Multiplication.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-multiplication/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Multiplication.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Not.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-not/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Not.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Or.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-or/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Or.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Sine.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-sine/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Sine.toString"]},{"name":"open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","description":"nz.co.jedsimson.lgp.lib.operations.Subtraction.toString","location":"lib/nz.co.jedsimson.lgp.lib.operations/-subtraction/to-string.html","searchKeys":["toString","open override fun toString(operands: List<RegisterIndex>, destination: RegisterIndex): String","nz.co.jedsimson.lgp.lib.operations.Subtraction.toString"]},{"name":"open override fun translate(program: Program<TProgram, TOutput>): String","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator.translate","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-translator/translate.html","searchKeys":["translate","open override fun translate(program: Program<TProgram, TOutput>): String","nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator.translate"]},{"name":"open override val configLoader: ConfigurationLoader","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.configLoader","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/config-loader.html","searchKeys":["configLoader","open override val configLoader: ConfigurationLoader","nz.co.jedsimson.lgp.lib.base.BaseProblem.configLoader"]},{"name":"open override val constantLoader: ConstantLoader<Double>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.constantLoader","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/constant-loader.html","searchKeys":["constantLoader","open override val constantLoader: ConstantLoader<Double>","nz.co.jedsimson.lgp.lib.base.BaseProblem.constantLoader"]},{"name":"open override val defaultValueProvider: DefaultValueProvider<Double>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.defaultValueProvider","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/default-value-provider.html","searchKeys":["defaultValueProvider","open override val defaultValueProvider: DefaultValueProvider<Double>","nz.co.jedsimson.lgp.lib.base.BaseProblem.defaultValueProvider"]},{"name":"open override val description: Description","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.description","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/description.html","searchKeys":["description","open override val description: Description","nz.co.jedsimson.lgp.lib.base.BaseProblem.description"]},{"name":"open override val fitnessFunctionProvider: () -> SingleOutputFitnessFunction<Double>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.fitnessFunctionProvider","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/fitness-function-provider.html","searchKeys":["fitnessFunctionProvider","open override val fitnessFunctionProvider: () -> SingleOutputFitnessFunction<Double>","nz.co.jedsimson.lgp.lib.base.BaseProblem.fitnessFunctionProvider"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.information","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.base.BaseInstruction.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.information","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.base.BaseProgram.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator.information","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program-translator/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.base.BaseProgramTranslator.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.information","location":"lib/nz.co.jedsimson.lgp.lib.configuration/-yaml-configuration-loader/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.configuration.YamlConfigurationLoader.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator.information","location":"lib/nz.co.jedsimson.lgp.lib.generators/-effective-program-generator/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.generators.EffectiveProgramGenerator.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator.information","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-instruction-generator/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.generators.RandomInstructionGenerator.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.information","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-program-generator/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Addition.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-addition/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Addition.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.And.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-and/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.And.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Division.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-division/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Division.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exclusive-or/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Exponent.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exponent/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Exponent.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Identity.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-identity/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Identity.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.IfGreater.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-greater/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.IfGreater.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-less-than-or-equal-to/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Multiplication.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-multiplication/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Multiplication.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Not.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-not/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Not.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Or.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-or/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Or.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Sine.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-sine/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Sine.information"]},{"name":"open override val information: ModuleInformation","description":"nz.co.jedsimson.lgp.lib.operations.Subtraction.information","location":"lib/nz.co.jedsimson.lgp.lib.operations/-subtraction/information.html","searchKeys":["information","open override val information: ModuleInformation","nz.co.jedsimson.lgp.lib.operations.Subtraction.information"]},{"name":"open override val name: String","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.name","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/name.html","searchKeys":["name","open override val name: String","nz.co.jedsimson.lgp.lib.base.BaseProblem.name"]},{"name":"open override val operationLoader: DefaultOperationLoader<Double>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.operationLoader","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/operation-loader.html","searchKeys":["operationLoader","open override val operationLoader: DefaultOperationLoader<Double>","nz.co.jedsimson.lgp.lib.base.BaseProblem.operationLoader"]},{"name":"open override val outputRegisterIndices: List<RegisterIndex>","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.outputRegisterIndices","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/output-register-indices.html","searchKeys":["outputRegisterIndices","open override val outputRegisterIndices: List<RegisterIndex>","nz.co.jedsimson.lgp.lib.base.BaseProgram.outputRegisterIndices"]},{"name":"open override val registeredModules: ModuleContainer<Double, Outputs.Single<Double>, Targets.Single<Double>>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.registeredModules","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/registered-modules.html","searchKeys":["registeredModules","open override val registeredModules: ModuleContainer<Double, Outputs.Single<Double>, Targets.Single<Double>>","nz.co.jedsimson.lgp.lib.base.BaseProblem.registeredModules"]},{"name":"open override val registers: RegisterSet<TProgram>","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.registers","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/registers.html","searchKeys":["registers","open override val registers: RegisterSet<TProgram>","nz.co.jedsimson.lgp.lib.base.BaseProgram.registers"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Addition.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-addition/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Addition.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.And.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-and/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.And.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Division.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-division/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Division.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exclusive-or/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.ExclusiveOr.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Exponent.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-exponent/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Exponent.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Identity.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-identity/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Identity.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.IfGreater.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-greater/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.IfGreater.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-if-less-than-or-equal-to/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.IfLessThanOrEqualTo.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Multiplication.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-multiplication/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Multiplication.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Not.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-not/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Not.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Or.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-or/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Or.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Sine.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-sine/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Sine.representation"]},{"name":"open override val representation: String","description":"nz.co.jedsimson.lgp.lib.operations.Subtraction.representation","location":"lib/nz.co.jedsimson.lgp.lib.operations/-subtraction/representation.html","searchKeys":["representation","open override val representation: String","nz.co.jedsimson.lgp.lib.operations.Subtraction.representation"]},{"name":"open override var destination: RegisterIndex","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.destination","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/destination.html","searchKeys":["destination","open override var destination: RegisterIndex","nz.co.jedsimson.lgp.lib.base.BaseInstruction.destination"]},{"name":"open override var instructions: MutableList<Instruction<TProgram>>","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.instructions","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/instructions.html","searchKeys":["instructions","open override var instructions: MutableList<Instruction<TProgram>>","nz.co.jedsimson.lgp.lib.base.BaseProgram.instructions"]},{"name":"open override var operands: MutableList<RegisterIndex>","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.operands","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/operands.html","searchKeys":["operands","open override var operands: MutableList<RegisterIndex>","nz.co.jedsimson.lgp.lib.base.BaseInstruction.operands"]},{"name":"open override var operation: Operation<T>","description":"nz.co.jedsimson.lgp.lib.base.BaseInstruction.operation","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-instruction/operation.html","searchKeys":["operation","open override var operation: Operation<T>","nz.co.jedsimson.lgp.lib.base.BaseInstruction.operation"]},{"name":"val config: Configuration? = null","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.config","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/config.html","searchKeys":["config","val config: Configuration? = null","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.config"]},{"name":"val configFilename: String? = null","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.configFilename","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/config-filename.html","searchKeys":["configFilename","val configFilename: String? = null","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.configFilename"]},{"name":"val constants: List<Double>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.constants","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/constants.html","searchKeys":["constants","val constants: List<Double>","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.constants"]},{"name":"val defaultRegisterValue: Double = 1.0","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.defaultRegisterValue","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/default-register-value.html","searchKeys":["defaultRegisterValue","val defaultRegisterValue: Double = 1.0","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.defaultRegisterValue"]},{"name":"val description: Description","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.description","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/description.html","searchKeys":["description","val description: Description","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.description"]},{"name":"val fitnessFunction: SingleOutputFitnessFunction<Double>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.fitnessFunction","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/fitness-function.html","searchKeys":["fitnessFunction","val fitnessFunction: SingleOutputFitnessFunction<Double>","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.fitnessFunction"]},{"name":"val macroMutationDeletionRate: Double = 0.33","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.macroMutationDeletionRate","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/macro-mutation-deletion-rate.html","searchKeys":["macroMutationDeletionRate","val macroMutationDeletionRate: Double = 0.33","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.macroMutationDeletionRate"]},{"name":"val macroMutationInsertionRate: Double = 0.67","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.macroMutationInsertionRate","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/macro-mutation-insertion-rate.html","searchKeys":["macroMutationInsertionRate","val macroMutationInsertionRate: Double = 0.67","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.macroMutationInsertionRate"]},{"name":"val maximumCrossoverDistance: Int = 5","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.maximumCrossoverDistance","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/maximum-crossover-distance.html","searchKeys":["maximumCrossoverDistance","val maximumCrossoverDistance: Int = 5","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.maximumCrossoverDistance"]},{"name":"val maximumSegmentLength: Int = 6","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.maximumSegmentLength","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/maximum-segment-length.html","searchKeys":["maximumSegmentLength","val maximumSegmentLength: Int = 6","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.maximumSegmentLength"]},{"name":"val maximumSegmentLengthDifference: Int = 3","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.maximumSegmentLengthDifference","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/maximum-segment-length-difference.html","searchKeys":["maximumSegmentLengthDifference","val maximumSegmentLengthDifference: Int = 3","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.maximumSegmentLengthDifference"]},{"name":"val microOperationMutationRate: Double = 0.4","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.microOperationMutationRate","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/micro-operation-mutation-rate.html","searchKeys":["microOperationMutationRate","val microOperationMutationRate: Double = 0.4","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.microOperationMutationRate"]},{"name":"val microRegisterMutationRate: Double = 0.4","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.microRegisterMutationRate","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/micro-register-mutation-rate.html","searchKeys":["microRegisterMutationRate","val microRegisterMutationRate: Double = 0.4","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.microRegisterMutationRate"]},{"name":"val name: String","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.name","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/name.html","searchKeys":["name","val name: String","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.name"]},{"name":"val numberOfOffspring: Int = 10","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.numberOfOffspring","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/number-of-offspring.html","searchKeys":["numberOfOffspring","val numberOfOffspring: Int = 10","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.numberOfOffspring"]},{"name":"val operationClassNames: List<String>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.operationClassNames","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/operation-class-names.html","searchKeys":["operationClassNames","val operationClassNames: List<String>","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.operationClassNames"]},{"name":"val outputRegisterIndices: List<RegisterIndex>","description":"nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.outputRegisterIndices","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-program-generator/output-register-indices.html","searchKeys":["outputRegisterIndices","val outputRegisterIndices: List<RegisterIndex>","nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.outputRegisterIndices"]},{"name":"val outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.outputResolver","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/output-resolver.html","searchKeys":["outputResolver","val outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput","nz.co.jedsimson.lgp.lib.base.BaseProgram.outputResolver"]},{"name":"val outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput","description":"nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.outputResolver","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-program-generator/output-resolver.html","searchKeys":["outputResolver","val outputResolver: (BaseProgram<TProgram, TOutput>) -> TOutput","nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.outputResolver"]},{"name":"val params: BaseProblemParameters","description":"nz.co.jedsimson.lgp.lib.base.BaseProblem.params","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem/params.html","searchKeys":["params","val params: BaseProblemParameters","nz.co.jedsimson.lgp.lib.base.BaseProblem.params"]},{"name":"val randomStateSeed: Long? = null","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.randomStateSeed","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/random-state-seed.html","searchKeys":["randomStateSeed","val randomStateSeed: Long? = null","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.randomStateSeed"]},{"name":"val runs: Int = 10","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.runs","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/runs.html","searchKeys":["runs","val runs: Int = 10","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.runs"]},{"name":"val sentinelTrueValue: TProgram","description":"nz.co.jedsimson.lgp.lib.base.BaseProgram.sentinelTrueValue","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-program/sentinel-true-value.html","searchKeys":["sentinelTrueValue","val sentinelTrueValue: TProgram","nz.co.jedsimson.lgp.lib.base.BaseProgram.sentinelTrueValue"]},{"name":"val sentinelTrueValue: TProgram","description":"nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.sentinelTrueValue","location":"lib/nz.co.jedsimson.lgp.lib.generators/-random-program-generator/sentinel-true-value.html","searchKeys":["sentinelTrueValue","val sentinelTrueValue: TProgram","nz.co.jedsimson.lgp.lib.generators.RandomProgramGenerator.sentinelTrueValue"]},{"name":"val testFitness: Double","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult.testFitness","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-test-result/test-fitness.html","searchKeys":["testFitness","val testFitness: Double","nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult.testFitness"]},{"name":"val testResult: TestResult<Double, Outputs.Single<Double>>","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult.testResult","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-test-result/test-result.html","searchKeys":["testResult","val testResult: TestResult<Double, Outputs.Single<Double>>","nz.co.jedsimson.lgp.lib.base.BaseProblemTestResult.testResult"]},{"name":"val tournamentSize: Int = 20","description":"nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.tournamentSize","location":"lib/nz.co.jedsimson.lgp.lib.base/-base-problem-parameters/tournament-size.html","searchKeys":["tournamentSize","val tournamentSize: Int = 20","nz.co.jedsimson.lgp.lib.base.BaseProblemParameters.tournamentSize"]}]
