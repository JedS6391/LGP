group 'nz.co.jedsimson.lgp'
version '5.0'

buildscript {
    ext.kotlin_version = '1.3.40'
    ext.dokka_version = '0.9.18'
    ext.kotlinx_coroutines_version = '1.2.2'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "http://dl.bintray.com/kotlin/kotlin-eap"
        }
        maven {
            url "https://dl.bintray.com/spekframework/spek-dev"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "http://dl.bintray.com/kotlin/kotlin-eap"
    }
    maven {
        url "https://dl.bintray.com/spekframework/spek-dev"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'

    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    compile group: 'com.opencsv', name: 'opencsv', version: '4.1'

    testCompile('org.junit.jupiter:junit-jupiter-api:5.3.1')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.3.1')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.3.1')

    testImplementation ('org.spekframework.spek2:spek-dsl-jvm:2.0.0-alpha.1')  {
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntimeOnly ('org.spekframework.spek2:spek-runner-junit5:2.0.0-alpha.1') {
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }

    // spek requires kotlin-reflect, can be omitted if already in the classpath
    testRuntimeOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
}


// Dokka tasks
task dokkaApiHtml(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'html'
    outputDirectory = "$buildDir/../docs/api/html"
}


task dokkaApiJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/../docs/api/javadoc"
}

// Javadoc
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

// All source files
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// JAR for just core and lib packages (excluding examples)
task coreJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'LGP',
                'Implementation-Version': version
    }

    baseName = project.name + '-core'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Prints the current project version
task printVersion {
    doLast {
        println project.version
    }
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams true
    }
}

// Signing and deployment
apply plugin: 'maven'

// We don't want local builds to have to depend on the signing process, so we disable
// signing if the signing GPG key ID is not present.
if (System.getenv('GPG_KEY_ID')) {
    apply plugin: 'signing'

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
        setRequired { required true }
    }
}

artifacts {
    archives sourcesJar, javadocJar
}

// Build, sign, and upload
uploadArchives {
    repositories {
        mavenDeployer {

            // Sign POM
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            // Destination
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }

            // Add required metadata to POM
            pom.project {
                name 'LGP'
                packaging 'jar'
                description 'A robust Linear Genetic Programming implementation on the JVM using Kotlin. '
                url 'https://github.com/JedS6391/LGP'

                scm {
                    connection 'scm:git:git://github.com/JedS6391/LGP.git'
                    developerConnection 'scm:git:ssh://github.com/JedS6391/LGP.git'
                    url 'http://github.com/JedS6391/LGP/tree/master'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/JedS6391/LGP/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'jedsimson'
                        name 'Jed Simson'
                        email 'jed.simson@gmail.com'
                        organization 'jedsimson'
                        organizationUrl 'https://jedsimson.co.nz'
                    }
                }
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}